{"version":3,"sources":["tasks.component.ts"],"names":["core_1","require","paginator_1","sort_1","table_1","TasksComponent","dataHandler","this","displayedColumns","prototype","ngOnInit","_this","tasksSubject","subscribe","tasks","dataSource","MatTableDataSource","refreshTable","ngAfterViewInit","addTableObjects","toggleTaskCompleted","task","completed","getPriorityColor","priority","color","data","sortingDataAccessor","colName","id","category","title","date","sort","paginator","__decorate","ViewChild","MatPaginator","static","MatSort","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAEAC,YAAAD,QAAA,+BACAE,OAAAF,QAAA,0BAEAG,QAAAH,QAAA,2BAOAI,eAAA,WAaE,SAAAA,EAAoBC,GAAAC,KAAAD,YAAAA,EAVbC,KAAAC,iBAA6B,CAAC,QAAS,KAAM,QAAS,OAAQ,WAAY,YAuFnF,OA1EEH,EAAAI,UAAAC,SAAA,WAAA,IAAAC,EAAAJ,KACEA,KAAKD,YAAYM,aAAaC,UAAU,SAAAC,GAAS,OAAAH,EAAKG,MAAQA,IAG9DP,KAAKQ,WAAa,IAAIX,QAAAY,mBAEtBT,KAAKU,gBAIPZ,EAAAI,UAAAS,gBAAA,WAEEX,KAAKY,mBAKPd,EAAAI,UAAAW,oBAAA,SAAoBC,GAClBA,EAAKC,WAAaD,EAAKC,WAIjBjB,EAAAI,UAAAc,iBAAR,SAAyBF,GAGvB,OAAIA,EAAKC,UACA,UAGLD,EAAKG,UAAYH,EAAKG,SAASC,MAC1BJ,EAAKG,SAASC,MAGhB,QAKDpB,EAAAI,UAAAQ,aAAR,WAEEV,KAAKQ,WAAWW,KAAOnB,KAAKO,MAE5BP,KAAKY,kBAMLZ,KAAKQ,WAAWY,oBAAsB,SAACN,EAAMO,GAG3C,OAAQA,GACN,IAAK,WACH,OAAOP,EAAKG,SAAWH,EAAKG,SAASK,GAAK,KAE5C,IAAK,WACH,OAAOR,EAAKS,SAAWT,EAAKS,SAASC,MAAQ,KAE/C,IAAK,OACH,OAAOV,EAAKW,KAAOX,EAAKW,KAAO,KAGjC,IAAK,QACH,OAAOX,EAAKU,SAOZ1B,EAAAI,UAAAU,gBAAR,WACEZ,KAAKQ,WAAWkB,KAAO1B,KAAK0B,KAC5B1B,KAAKQ,WAAWmB,UAAY3B,KAAK2B,WAjFSC,WAAA,CAA3CnC,OAAAoC,UAAUlC,YAAAmC,aAAc,CAAEC,QAAQ,8BACIH,WAAA,CAAtCnC,OAAAoC,UAAUjC,OAAAoC,QAAS,CAAED,QAAQ,yBARnBjC,EAAc8B,WAAA,CAL1BnC,OAAAwC,UAAU,CACTC,SAAU,YACVC,YAAa,yBACbC,UAAW,CAAC,4BAEDtC,GAAb,GAAauC,QAAAvC,eAAAA","file":"tasks.component.min.js","sourcesContent":["import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { Task } from 'src/app/model/Task';\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { DataHandlerService } from 'src/app/services/data-handler.service';\nimport { MatTableDataSource } from '@angular/material/table';\n\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.css']\n})\nexport class TasksComponent implements OnInit, AfterViewInit {\n\n  // поля для таблицы (те, что отображают данные из задачи - должны совпадать с названиями переменных класса)\n  public displayedColumns: string[] = ['color', 'id', 'title', 'date', 'priority', 'category'];\n  public dataSource: MatTableDataSource<Task>; // контейнер - источник данных для таблицы\n\n  // ссылки на компоненты таблицы\n  @ViewChild(MatPaginator, { static: false }) private paginator: MatPaginator;\n  @ViewChild(MatSort, { static: false }) private sort: MatSort;\n\n\n  tasks: Task[];\n\n  constructor(private dataHandler: DataHandlerService) {\n  }\n\n  ngOnInit() {\n    this.dataHandler.tasksSubject.subscribe(tasks => this.tasks = tasks);\n\n    // датасорс обязательно нужно создавать для таблицы, в него присваивается любой источник (БД, массивы, JSON и пр.)\n    this.dataSource = new MatTableDataSource();\n\n    this.refreshTable();\n  }\n\n  // в этом методе уже все проинциализировано, поэтому можно присваивать объекты (иначе может быть ошибка undefined)\n  ngAfterViewInit(): void {\n\n    this.addTableObjects();\n\n  }\n\n\n  toggleTaskCompleted(task: Task) {\n    task.completed = !task.completed;\n  }\n\n  // в зависимости от статуса задачи - вернуть цвет названия\n  private getPriorityColor(task: Task) {\n\n    // цвет завершенной задачи\n    if (task.completed) {\n      return '#F8F9FA'; // TODO вынести цвета в константы (magic strings, magic numbers)\n    }\n\n    if (task.priority && task.priority.color) {\n      return task.priority.color;\n    }\n\n    return '#fff'; // TODO вынести цвета в константы (magic strings, magic numbers)\n\n  }\n\n  // показывает задачи с применением всех текущий условий (категория, поиск, фильтры и пр.)\n  private refreshTable() {\n\n    this.dataSource.data = this.tasks; // обновить источник данных (т.к. данные массива tasks обновились)\n\n    this.addTableObjects();\n\n\n    // когда получаем новые данные..\n    // чтобы можно было сортировать по столбцам \"категория\" и \"приоритет\", т.к. там не примитивные типы, а объекты\n    // @ts-ignore - показывает ошибку для типа даты, но так работает, т.к. можно возвращать любой тип\n    this.dataSource.sortingDataAccessor = (task, colName) => {\n\n      // по каким полям выполнять сортировку для каждого столбца\n      switch (colName) {\n        case 'priority': {\n          return task.priority ? task.priority.id : null;\n        }\n        case 'category': {\n          return task.category ? task.category.title : null;\n        }\n        case 'date': {\n          return task.date ? task.date : null;\n        }\n\n        case 'title': {\n          return task.title;\n        }\n      }\n    };\n\n  }\n\n  private addTableObjects() {\n    this.dataSource.sort = this.sort; // компонент для сортировки данных (если необходимо)\n    this.dataSource.paginator = this.paginator; // обновить компонент постраничности (кол-во записей, страниц)\n  }\n}\n"]}