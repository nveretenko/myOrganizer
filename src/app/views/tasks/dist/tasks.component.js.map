{"version":3,"sources":["tasks.component.ts"],"names":[],"mappings":"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","file":"tasks.component.js","sourcesContent":["import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { Task } from 'src/app/model/Task';\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { DataHandlerService } from 'src/app/services/data-handler.service';\nimport { MatTableDataSource } from '@angular/material/table';\n\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.css']\n})\nexport class TasksComponent implements OnInit, AfterViewInit {\n\n  // поля для таблицы (те, что отображают данные из задачи - должны совпадать с названиями переменных класса)\n  public displayedColumns: string[] = ['color', 'id', 'title', 'date', 'priority', 'category'];\n  public dataSource: MatTableDataSource<Task>; // контейнер - источник данных для таблицы\n\n  // ссылки на компоненты таблицы\n  @ViewChild(MatPaginator, { static: false }) private paginator: MatPaginator;\n  @ViewChild(MatSort, { static: false }) private sort: MatSort;\n\n\n  tasks: Task[];\n\n  constructor(private dataHandler: DataHandlerService) {\n  }\n\n  ngOnInit() {\n    this.dataHandler.tasksSubject.subscribe(tasks => this.tasks = tasks);\n\n    // датасорс обязательно нужно создавать для таблицы, в него присваивается любой источник (БД, массивы, JSON и пр.)\n    this.dataSource = new MatTableDataSource();\n\n    this.refreshTable();\n  }\n\n  // в этом методе уже все проинциализировано, поэтому можно присваивать объекты (иначе может быть ошибка undefined)\n  ngAfterViewInit(): void {\n\n    this.addTableObjects();\n\n  }\n\n\n  toggleTaskCompleted(task: Task) {\n    task.completed = !task.completed;\n  }\n\n  // в зависимости от статуса задачи - вернуть цвет названия\n  private getPriorityColor(task: Task) {\n\n    // цвет завершенной задачи\n    if (task.completed) {\n      return '#F8F9FA'; // TODO вынести цвета в константы (magic strings, magic numbers)\n    }\n\n    if (task.priority && task.priority.color) {\n      return task.priority.color;\n    }\n\n    return '#fff'; // TODO вынести цвета в константы (magic strings, magic numbers)\n\n  }\n\n  // показывает задачи с применением всех текущий условий (категория, поиск, фильтры и пр.)\n  private refreshTable() {\n\n    this.dataSource.data = this.tasks; // обновить источник данных (т.к. данные массива tasks обновились)\n\n    this.addTableObjects();\n\n\n    // когда получаем новые данные..\n    // чтобы можно было сортировать по столбцам \"категория\" и \"приоритет\", т.к. там не примитивные типы, а объекты\n    // @ts-ignore - показывает ошибку для типа даты, но так работает, т.к. можно возвращать любой тип\n    this.dataSource.sortingDataAccessor = (task, colName) => {\n\n      // по каким полям выполнять сортировку для каждого столбца\n      switch (colName) {\n        case 'priority': {\n          return task.priority ? task.priority.id : null;\n        }\n        case 'category': {\n          return task.category ? task.category.title : null;\n        }\n        case 'date': {\n          return task.date ? task.date : null;\n        }\n\n        case 'title': {\n          return task.title;\n        }\n      }\n    };\n\n  }\n\n  private addTableObjects() {\n    this.dataSource.sort = this.sort; // компонент для сортировки данных (если необходимо)\n    this.dataSource.paginator = this.paginator; // обновить компонент постраничности (кол-во записей, страниц)\n  }\n}\n"]}